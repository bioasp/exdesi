% vertex(N,X)           vertex X in network N
% obs_elabel(N,X,Y,S).  edge from X to Y with sign S in network N
% preadout(X).          possible readout in node X
% pperturb(X,S).        possible perturbed node X, S sign of perturbation
% done(E,X,S).          already performed experiment E, perturbe node X with sign S

% 3 possible experiments
pexperiment(1..3).
cexperiment(X) :- pexperiment(X).

net(N) :- vertex(N,X).
% keep isolated vertices
vertex(N,X) :- obs_elabel(N,Y,X,S).
vertex(N,Y) :- obs_elabel(N,Y,X,S).
vertex(X)   :- vertex(N,X).
vertex(N,X) :- net(N), vertex(X).


elabel(N,Y,X,S) :- obs_elabel(N,Y,X,S). % iggy style


%choose experimental setting
{pert(E,G,S)} :- pperturb(G,S), cexperiment(E). % choose perturbations
%{readout(E,G)} :- preadout(G), cexperiment(E).  % choose readouts
readout(E,G) :- preadout(G), cexperiment(E).    % take all readouts
pert(E,G)    :- pert(E,G,S).

input(E,X)      :- pert(E,X).           % iggy style
vlabel(E,N,X,S) :- pert(E,X,S), net(N). % iggy style


% no two pertubations in the same node
:- pert(E,G,S1),pert(E,G,S2),S1!=S2.

npert(E,G,S) :- pperturb(G,S), cexperiment(E), not pert(E,G,S).

% not two times the same experiment
%allpert(E2,E1) :- pert(E2,G,S) : pert(E1,G,S); cexperiment(E1), cexperiment(E2), E1 < E2.
%allnpert(E2,E1) :- npert(E2,G,S) : npert(E1,G,S); cexperiment(E1), cexperiment(E2), E1 < E2.
%:- allpert(E1,E2), allnpert(E1,E2), E1 < E2.

% force an partial order among the experiments earlier experiment have fewer pertubations
countpert(E,Z) :- Z = #count{ G : pert(E,G)}, cexperiment(E).
:- countpert(E1,Z1), countpert(E1+1,Z2), Z1>Z2.


% force total order biggest different pertubation last
diffpert(G,S,E1,E1+1) :- exp(E1), exp(E1+1), pert(E1,G,S),  npert(E1+1,G,S).
diffpert(G,S,E1,E1+1) :- exp(E1), exp(E1+1), npert(E1,G,S), pert(E1+1,G,S).
hasbiggerdiffpert(G,S,E1,E2) :-  diffpert(G,S,E1,E2), diffpert(G2,S2,E1,E2), G<G2.
hasbiggerdiffpert(G,S,E1,E2) :-  diffpert(G,S,E1,E2), diffpert(G2,S2,E1,E2), G==G2, S<S2.
biggestdiffpert(G,S,E1,E2) :- diffpert(G,S,E1,E2) , not hasbiggerdiffpert(G,S,E1,E2).
:- exp(E1),exp(E2), E1<E2, biggestdiffpert(G,S,E1,E2), pert(E1,G,S), npert(E2,G,S).


% choose labeling
1{vlabel(E,NET,G,-1); vlabel(E,NET,G,0); vlabel(E,NET,G,1); vlabel(E,NET,G,undef)}1 :- vertex(NET,G), cexperiment(E).

vlabel(E,N,G,1) :- vertex(N,G), pert(E,G,1).
vlabel(E,N,G,-1):- vertex(N,G), pert(E,G,-1).
vlabel(E,N,G,0) :- vertex(N,G), pert(E,G,0).


infl(E,N,G,1)  :- elabel(N,A,G,1),  vlabel(E,N,A,1).
infl(E,N,G,1)  :- elabel(N,A,G,-1), vlabel(E,N,A,-1).
infl(E,N,G,1)  :- edge(N,A,G), vlabel(E,N,A,undef).

infl(E,N,G,-1) :- elabel(N,A,G,-1), vlabel(E,N,A,1).
infl(E,N,G,-1) :- elabel(N,A,G, 1),  vlabel(E,N,A,-1).
infl(E,N,G,-1) :- edge(N,A,G), vlabel(E,N,A,undef).

:- vlabel(E,N,G,0),     not pert(E,G), infl(E,N,G,S).
:- vlabel(E,N,G,1),     not pert(E,G), not infl(E,N,G,1).
:- vlabel(E,N,G,1),     not pert(E,G), infl(E,N,G,-1).
:- vlabel(E,N,G,-1),    not pert(E,G), not infl(E,N,G,-1).
:- vlabel(E,N,G,-1),    not pert(E,G), infl(E,N,G,1).
:- vlabel(E,N,G,undef), not pert(E,G), not infl(E,N,G,1).
:- vlabel(E,N,G,undef), not pert(E,G), not infl(E,N,G,-1).


getspos(E,N,X) :- vertex(N,X), pert(E,X,1).
getspos(E,N,X) :- getspos(E,N,Y), not pert(E,X), elabel(N,Y,X, 1).
getspos(E,N,X) :- getsneg(E,N,Y), not pert(E,X), elabel(N,Y,X,-1).

getsneg(E,N,X) :- vertex(N,X), pert(E,X,-1).
getsneg(E,N,X) :- getsneg(E,N,Y), not pert(E,X), elabel(N,Y,X, 1).
getsneg(E,N,X) :- getspos(E,N,Y), not pert(E,X), elabel(N,Y,X,-1).

% founded 1
founded(E,N,X) :- vlabel(E,N,X, 1), getspos(E,N,X).
% founded -1
founded(E,N,X) :- vlabel(E,N,X,-1), getsneg(E,N,X).
% founded undef
founded(E,N,X) :- vlabel(E,N,X,undef), getspos(E,N,X), getsneg(E,N,X).

:- vlabel(E,N,X, 1), not founded(E,N,X).
:- vlabel(E,N,X,-1), not founded(E,N,X).
:- vlabel(E,N,X,undef), not founded(E,N,X).


% check whether labelings are different
difflabel(E,N1,G,S1) :- readout(E,G), vlabel(E,N1,G,S1), vlabel(E,N2,G,S2), N1!=N2,S1!=S2.
diff(E,N1,N2) :- difflabel(E,N1,G,S1), difflabel(E,N2,G,S2), N1<N2, S1!=S2.
diff(E) :- diff(E,N1,N2).
:- cexperiment(E), not diff(E).
diff :- diff(E).
diff(N1,N2) :- diff(E,N1,N2).



same(N1,N2) :- net(N1), net(N2),N1<N2, not diff(N1,N2).
%same(E,N1,N2) :- net(N1), net(N2),N1<N2, exp(E), not diff(E,N1,N2).


% the first experiment must distinguish atleast 2 network classes
exp(E) :- pert(E,G).
:- exp(1) , not diff(1).

% each further experiment must distinguish atleast 1 more network class
sdiff(E,N1,N2) :- exp(E), exp(E2), E2<=E, diff(E2,N1,N2).
newdiff(E) :-  exp(E), exp(E2), E2<E, diff(E,N1,N2), not sdiff(E2,N1,N2).
:- exp(E1), exp(E2), E2>E1, not newdiff(E2).



smsame(X) :- same(Y,X).
notunique(X) :- same(X,Y).
notunique(X) :- same(Y,X).
eqclass(X) :- same(X,Y), not smsame(X).
eqclass(X) :- net(X) , not notunique(X).
counteqclasses(Z) :- Z = #count{X : eqclass(X)}.
:- not diff.

%maximize differences
% #maximize[ not false = 0, diff(X,Y) @ 1 ].
#maximize { X: counteqclasses(X) }.
%#maximize[ not false, eqclass(X) @2 }.
% #minimize[ cexperiment(X) @ 1 ].




#show pert/3.

#show counteqclasses/1.

#show difflabel/4.